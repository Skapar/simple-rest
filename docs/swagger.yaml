definitions:
  dto.CreateUserDTO:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - password
    type: object
  dto.UpdateUserDTO:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  entities.User:
    description: User represents a user in the system
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      refresh_token:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  map_string_string:
    additionalProperties:
      type: string
    type: object
  models.ErrorResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  models.Response-entities_User:
    properties:
      data:
        $ref: '#/definitions/entities.User'
      message:
        type: string
      success:
        type: boolean
    type: object
  models.Response-map_string_string:
    properties:
      data:
        $ref: '#/definitions/map_string_string'
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Это простое REST API приложение на Go с использованием Gin и GORM
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Simple REST API
  version: "1.0"
paths:
  /api/v1/signup:
    post:
      consumes:
      - application/json
      description: Register a new user with the input payload
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response-map_string_string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /api/v1/user/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response-entities_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user by ID
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response-entities_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a user by ID
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Soft delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response-entities_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Soft delete a user by ID
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response-entities_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a user by ID
      tags:
      - user
  /health:
    get:
      consumes:
      - application/json
      description: Check if the server is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Check the health of the server
      tags:
      - health
swagger: "2.0"
